---
# type: docs 
title: Ssh
date: 2024-10-30T11:02:27+03:00
featured: false
draft: false
comment: true
toc: true
reward: true
pinned: false
carousel: false
series: config
categories: [set computer]
tags: [ssh]
images: []
---

Настройка SSH клиента для GIthub

<!--more-->
# Что такое SSH
## Что может протокол SSH:

 - заменить telnet — обеспечить доступ к терминалу удалённой машины по шифрованному каналу;
 - заменить ftp — обеспечить обмен файлами с удалённой машиной по шифрованному каналу и без необходимости обходить ограничения, которые присущи ftp при работе через NAT и прокси;
 - обеспечить проброс портов — обеспечить доступ к портам с локальной машины или её сети на порты, которые доступы удалённой машине;
 - socks-прокси — обеспечить локальное устройство или целую сеть socks-прокси через удалённую машину;
 - выполнение команд на удалённой машине из скриптов локальной машины.

Самое главное, что SSH обеспечивает безопасность соединения с удалённой машиной с помощью современных алгоритмов шифрования. Вся пересылаемая информация между узлами находится внутри зашифрованного туннеля.

# Что должно быть на компьютере?

1. Установить Git и GPG

Для Manjaro:
```shell
sudo pacman -S git
```

Для FreeBSD:
```shell
pkg install git
```

PPG обычно уже стоит

2. Сгенерить ключи

```shell
ssh-keygen -t ed25519 -C "my@email.com"
```
ключи и файлы настроек хранятся по пути `~/.ssh/`

Сейчас мода на алгоритм ed25519 для Github и др.

Файл `config` — файл настройки клиента. Позволяет настраивать параметры соединений, чтобы не было необходимости каждый раз указывать опции для каждого конкретного сервера.

Для Github записываю в `config`:
```shell
Host github.com
    HostName github.com
    User goroedge
    IdentityFile ~/.ssh/id_ed25519
    IdentitiesOnly yes
```
и это будет мой аккаунт на Github

Файл `authorized_keys` содержит список ключей для доступа к этому пользователю через сервер sshd на этой машине. Обычно этот файл отсутствует, но если вы хотите использовать при подключении к данной машине под данным пользователем не только имя пользователя и пароль, но и ключ, то этот файл должен быть создан, и содержать публичные необходимые публичные ключи.

Файл `known_hosts` содержит список ключей для хостов, к которым ранее уже было произведено подключение. Это один из инструментов безопасности. При первом подключении к серверу вы получаете подпись его ключа доступа, которую в дальнейшем будете использовать для проверки легитимности хоста. При повторном подключении эти данные позволяют проверить, что это именно тот сервер, к которому вы подключались ранее. Если вы при подключении к серверу получаете ошибку, возможно в ваш сеанс подключения желает кто-то вклиниться с целью дешифровки передаваемых данных. Если вы не перестраивали сервер, то это будет для вас знаком, что доверять серверу нельзя.

Файлы `id_*` содержат закрытые ключи доступа для текущего устройства. Вместо * в имени файла присутствует имя используемого алгоритма шифрования. Ключей может быть несколько, для каждого запрошенного алгоритма шифрования. Эти файлы должны храниться в полной секретности. Никому их передавать нельзя. На ключи доступа можно установить пароль, без которого невозможно будет воспользоваться этим ключом. В таком случае даже в случае утечки ключа, воспользоваться им будет невозможно без знания пароля.

Файлы `id_*.pub` содержат публичные ключи доступа, которые используются для подключения к другим устройствам. Вместо * в имени файла присутствует имя используемого алгоритма шифрования, которые предоставляет удалённое устройство при подключении. Ключей может быть несколько, для каждого доступного алгоритма шифрования.

Кроме этого, имена публичных ключей шифрования могут быть любыми. В этом случае при подключении нужно прямо указать какой файл вы будете использовать при подключении к удалённой машине. Сделать это можно через параметры командной строки или через файл конфигурации config.

3. Добавить открытый ключ `id_ed25519.pub` в настройки Github

 - Скопировать ключ изфайла в буфер обмена
 - в настройках **Github** выбрать раздел **Access** и подраздел **SSH and GPG keys**
 - нажать на кнопку **New SSH key** и вставить в поле ключ
 - нажать на кнопку **Add SSH key**

4. Проверить настройки агента
```shell
ssh -T git@github.com
Enter passphrase for key '/home/edge/.ssh/id_ed25519': 
Hi goroedge! You've successfully authenticated, but GitHub does not provide shell access.
```
ввожу команду `ssh` и пароль от ключа. В случае успеха, выдаст сообщение с приветствием.

Если агент не работает, нужно добавить ключ агенту:
 - проверяем, что агент запущен
 ```shell
 $ eval "$(ssh-agent -s)"
> Agent pid 59566
```
- добавим ему приватный ключ
```shell
ssh-add ~/.ssh/id_ed25519
```
проверяем еще раз. Если все ОК, то пользуемся Github.
Может отобразиться следующее предупреждение:

При первом входе может спросить пароль от ключа:
```shell
> The authenticity of host 'github.com (IP ADDRESS)' can't be established.
> ED25519 key fingerprint is SHA256:+DiY3wvvV6TuJJhbpZisF/zLDA0zPMSvHdkr4UvCOqU.
> Are you sure you want to continue connecting (yes/no)?
```
5. Добавление или изменение парольной фразы
Парольную фразу для существующего закрытого ключа можно изменить без повторного создания пары ключа, введя следующую команду:

```shell
$ ssh-keygen -p -f ~/.ssh/id_ed25519
```
