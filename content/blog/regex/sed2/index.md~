## Примеры с редактором SED
### d
Удаляет строки с результатом поиска
```shell
╭─edge@bsd in ~ 
╰$ seq 10 | sed -E  '1,3d;5d'
4
6
7
8
9
10
```

Удалит строки с 1-й по 3-ю и 5-ю
```shell
╭─edge@bsd in ~ 
╰$ seq 10 | sed -E  '2,$d'   
1
```

а этот удалит со 2-й до последней.

### D
Сделаю файл для тренировок
```shell
╭─edge@bsd in ~ 
╰$ >b.txt
aaa aa ddd aaa 
bbb bbb bbbbbbb bb

ccc ccccc ccc cccccc

iii iiii iiiiii ii
^Z
```

Пока не понял, но по умолчанию работает как и `d`
Одно могу сказать, что для совместимости с FreeBSD нужно использовать только нотацию `i\` и на новой строке текст.
```shell
╭─edge@bsd in ~ 
╰$ sed -E '=;D' b.txt  
1
2
3
4
5
6
```
Я понимаю, что `=` добавляет номер строки, но `D` просто убивает следующую строку с текстом.

### e command

выполняет команды которые найдет в паттерне. Это другая `e`, не та что `-e` перед выражением.

Пока смысл этой команды выполнить команду в паттерне и заменить пространство паттерна результатом выполненной команды.

### F filename

### n и N

понимай буквально:
`n` --- выведет следующую строку после паттерна
`N` --- выведет строку паттерна и следующую строку

```shell
╭─edge@bsd in ~ 
╰$ seq 20 | sed -En '/[27]/{n;p;}'  

3
8
13
18
```
и
```shell
╭─edge@bsd in ~ 
╰$ seq 20 | sed -En '/[27]/{N;p;}' 

2
3
7
8
12
13
17
18
```
без `p` не работает

### p и P

печатает результат

`p` --- напечатает все, что затронул паттерн
`P` --- напечатает строку, где сработал паттерн до символа `\n`
```shell
╭─edge@bsd in ~ 
╰$ seq 20 | sed -En '/[27]/{N;p;}'

2
3
7
8
12
13
17
18

и так до \n

╭─edge@bsd in ~ 
╰$ seq 20 | sed -En '/[27]/{N;P;}'

2
7
12
17

```

### l

напечатает выходной результат как есть с символом окончания строки
```shell
╭─edge@bsd in ~ 
╰$ seq 20 | sed -En '/[27]/{l;}'  

2$
7$
12$
17$
20$
```
Это шикарный пример на комплексную работу опций:
```shell
╭─edge@bsd in ~ 
╰$ seq 8 | sed -En '/[27]/{=;N;N;i\
start->
a\
:end
p;}'
2
start->
2
3
4
:end
7
```

1. Знак `=` выводит номер строки
2. Команда `i\` --- выводит `start->`
3. Команда `N;N;` выводит следующие два строки из входного потока
4. Команда `p` --- разрешает все это дело печатать.

### h, H, g, G

```shell
╭─edge@bsd in ~ 
╰$ seq 12 | sed -Ene '/[27]/!{H;}' -e '/[27]/{g;p;a\
---
}'

1
--- 

1
3
4
5
6
--- 

1
3
4
5
6
8
9
10
11
--- 
```

Это смертельный номер!!!

У sed есть два буфера:
1. Буфер редактирования
2. Буфер удержания

В обычном режиме все происходит с буфером редактирования и его результаты выводятся в выходной поток командой `p`.

Но мы можем записать значение буфера редактирования (а это есть текущая строка в цикле обработки) в буфер удержания командой `h` с перезаписыванием буфера удержания или командой `H` с добавлением в новую строку буфера удержания.

Командой `g` мы очищаем буфер редакирования и записываем в него все, что есть в буфере удержания, а командой `G` добавляем к буферу редактирования содержимое буфера удержания.

Команда `x` --- меняет местами буфер удержания и буфер редактирования.

