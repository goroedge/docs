---
title: "Sed [Разделители и команды f i I ]"
date: 2024-11-21T14:18:44+03:00
draft: false
description: 
noindex: false
featured: false
pinned: false
# comments: false
series:
  - regex
categories:
  - blog
tags:
  - sed
  - find
  - posix
images:
  - sed4.png
weight: 100
authors:
  - ra

# menu:
#   main:
#     weight: 100
#     params:
#       icon:
#         vendor: bs
#         name: book
#         color: '#e24d0e'
---
Примеры использования поисковых запросов POSIX

<!--more-->
{{< bs/alert info >}}
Потоковый редактор SED. Разделители в запросах и обзор команд [f i I ]
{{< /bs/alert >}}

* Примеры с редактором SED

** Разделители в командах регулярных выражений 

Ещё один прикол. 
Разделителем в запросе регулярного выражения может быть любой символ. 
ставим `\` дальше разделитель, потом шаблон и опять разделитель. 
т.е. `/abc/d` --- удалит все строки где есть abc, но 
`\-abc-d` или `\%abc%d` или `\eabced` --- все сделают тоже самое 

```shell
╭─edge@edge-manjaro in ~/data/sites/hb3 on main ✘ (origin/main +7 -1)
╰$ printf "aaa\nbbb\nccc\nddd\n" | sed -E '\%ddd%sadaYap'
aaa
bbb
ccc
Ydd
Ydd
```
в этом примере разделителем были `%` вокруг маски `ddd`, и `a` вокруг шаблонов замены буквы `d` на `Y`
** Файлы с командами 
cat > g.sed
/abc/s/b/X/p
^Z
 и выполним команду 
echo abcdef | sed -n -f g.sed
aXcdef

** Команда i и I 
очень долго бился, поа до меня дошло, что -i .bac добавляет к старому файлу расширение .bac, и сохраяет предыдущие значения, а изменения будут в
первоначальном файле. 
Так вот i от I отличается нумерацией строк в потоке: 
-I нумерует все подряд, т.е. в 10-м файле нумерация продолжится после девятого. -i в каждом файле нумерацию начинает с 1. Все, больше никакой
разницы
